AWSTemplateFormatVersion: 2010-09-09
Description: This CloudFormation template sets up an AWS infrastructure for a Streamlit application. It creates nested stacks for Amazon OpenSearch Serverless, Knowledge base for Amazon Bedrock, Agents for Amazon Bedrock, and SSM parameters. It also configures an ALB, CloudFront, ECS cluster, CodeBuild projects, DynamoDB table, necessary IAM roles and policies, and custom resources for required configurations. 
Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: Environment Configuration
        Parameters:
          - GitURL
          - EnvironmentName
          - UserRoleArn
      - Label:
          default: Agent Configuration
        Parameters:
          - BedrockModelId
      - Label:
          default: VPC Configurations
        Parameters:
          - VPCId
          - PublicSubnetAId
          - PublicSubnetBId
          - PrivateSubnetAId
          - PrivateSubnetBId
      - Label:
          default: Autoscaling
        Parameters:
          - Task
          - Min
          - Max
          - TargetCpu
      - Label:
          default: Container Configurations
        Parameters:
          - Cpu
          - Memory
          - ContainerPort

Parameters:
  EnvironmentName:
    Description: Lowercase unique name to distinguish different web application in
      the same AWS account (min length 1 and max length 4)
    Type: String
    MinLength: 1
    MaxLength: 4

  UserRoleArn:
    Description: IAM Role ARN of the user allowed to access Amazon OpenSearch Serverless Collection arn:aws:iam::{AccountId}:role/{roleName}
    Type: String
    MinLength: 1

  GitURL:
    Type: String
    Description: Initial repository for web application
    Default: https://github.com/aws-samples/architecture-to-cloudformation.git

  BedrockModelId:
    Type: String
    Default: anthropic.claude-3-sonnet-20240229-v1:0
    Description: Amazon Bedrock Model ID for the agent
    MinLength: 1

  PublicSubnetAId:
    Type: AWS::EC2::Subnet::Id
    Description: Public Subnet A Id
    MinLength: 1

  PublicSubnetBId:
    Type: AWS::EC2::Subnet::Id
    Description: Public Subnet B Id
    MinLength: 1

  PrivateSubnetAId:
    Type: AWS::EC2::Subnet::Id
    Description: Private Subnet A Id
    MinLength: 1

  PrivateSubnetBId:
    Type: AWS::EC2::Subnet::Id
    Description: Private Subnet B Id
    MinLength: 1

  VPCId:
    Type: AWS::EC2::VPC::Id
    Description: VPC Id
    MinLength: 1

  Cpu:
    Description: 'CPU of Fargate Task. Make sure you put valid Memory and CPU pair,
      refer:
      https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ecs-taskdefinition.html#cfn-ecs-taskdefinition-cpu:~:text=requires%3A%20Replacement-,Cpu,-The%20number%20of'
    Type: Number
    Default: 512
    AllowedValues:
      - 256
      - 512
      - 1024
      - 2048
      - 4096

  Memory:
    Description: 'Memory of Fargate Task.  Make sure you put valid Memory and CPU
      pair, refer:
      https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ecs-taskdefinition.html#cfn-ecs-taskdefinition-cpu:~:text=requires%3A%20Replacement-,Cpu,-The%20number%20of'
    Type: Number
    Default: 1024
    AllowedValues:
      - 512
      - 1024
      - 2048
      - 3072
      - 4096
      - 5120
      - 6144
      - 7168
      - 8192
      - 16384
      - 30720

  Task:
    Description: Desired Docker task count
    Type: Number
    Default: 2

  Min:
    Description: Minimum containers for Autoscaling. Should be less than or equal to
      DesiredTaskCount
    Type: Number
    Default: 2

  Max:
    Description: Maximum containers for Autoscaling. Should be greater than or equal
      to DesiredTaskCount
    Type: Number
    Default: 5

  TargetCpu:
    Description: CPU Utilization Target
    Type: Number
    Default: 80

  ContainerPort:
    Description: Port for Docker host and container
    Type: Number
    Default: 80

Mappings:
  # Cloudfront Mappings
  CFRegionMap:
    us-east-1:
      PrefixListCloudFront: pl-3b927c52
    us-west-2:
      PrefixListCloudFront: pl-82a045eb

  # Cloudfront Mappings
  ELBRegionMap:
    us-east-1:
      ELBAccountId: '127311923021'
    us-west-2:
      ELBAccountId: '797873946194'

Resources:

  #########################
  ##### Nested Stack #####
  #######################

  AossVectorDBStack:
    Type: AWS::CloudFormation::Stack
    DependsOn: InitializeBuildCustomResource
    Properties:
      TemplateURL: !Sub 'https://s3.amazonaws.com/datasource${AWS::AccountId}-${EnvironmentName}/cfn_stack/opensearch-serverless-stack.yaml'
      Parameters:
        EnvironmentName: !Ref EnvironmentName
        LogsPolicyPolicyArn: !GetAtt LogsPolicy.PolicyArn
        GitURL: !Ref GitURL
        UserRoleArn: !Ref UserRoleArn
  
  KBStack:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: !Sub 'https://s3.amazonaws.com/datasource${AWS::AccountId}-${EnvironmentName}/cfn_stack/kb-stack.yaml'
      Parameters:
        EnvironmentName: !Ref EnvironmentName
        KnowledgeBaseServiceRoleArn: !GetAtt AossVectorDBStack.Outputs.KnowledgeBaseServiceRoleArn
        AOSSCollectionArn: !GetAtt AossVectorDBStack.Outputs.AOSSCollectionArn
        LogsPolicyPolicyArn: !GetAtt LogsPolicy.PolicyArn
        GitURL: !Ref GitURL

  AgentStack:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: !Sub 'https://s3.amazonaws.com/datasource${AWS::AccountId}-${EnvironmentName}/cfn_stack/agents-stack.yaml'
      Parameters:
        EnvironmentName: !Ref EnvironmentName
        BedrockModelId: !Ref BedrockModelId
        KnowledgeBaseId: !GetAtt KBStack.Outputs.KnowledgeBaseId
        KnowledgeBaseArn: !GetAtt KBStack.Outputs.KnowledgeBaseArn
        DynamoDBTableArn: !GetAtt DynamoDBTable.Arn

  ParameterStack:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: !Sub 'https://s3.amazonaws.com/datasource${AWS::AccountId}-${EnvironmentName}/cfn_stack/parameter-stack.yaml'
      Parameters:
        EnvironmentName: !Ref EnvironmentName
        AgentId: !GetAtt AgentStack.Outputs.AgentId
        AgentAliasId: !GetAtt AgentStack.Outputs.AgentAliasId
        KnowledgeBaseId: !GetAtt KBStack.Outputs.KnowledgeBaseId

  ###########################
  ##### Logging Cofig ######
  #########################

  LoggingBucket:
    Type: AWS::S3::Bucket
    DeletionPolicy: Retain
    Properties:
      OwnershipControls:
        Rules:
          - ObjectOwnership: BucketOwnerPreferred
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      VersioningConfiguration:
        Status: Enabled
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256

  LoggingBucketPolicy:
    Type: AWS::S3::BucketPolicy
    DeletionPolicy: Retain
    Properties:
      Bucket: !Ref LoggingBucket
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Action:
              - s3:PutObject
            Effect: Allow
            Principal:
              Service: logging.s3.amazonaws.com
            Resource:
              - !Sub arn:aws:s3:::${LoggingBucket}/*
          - Action:
              - s3:PutObject
            Effect: Allow
            Principal:
              AWS: !Sub
                - arn:aws:iam::${ElbAccount}:root
                - ElbAccount: !FindInMap
                    - ELBRegionMap
                    - !Ref AWS::Region
                    - ELBAccountId
            Resource:
              - !Sub arn:aws:s3:::${LoggingBucket}/alb/logs/AWSLogs/${AWS::AccountId}/*
          - Action:
              - s3:*
            Effect: Deny
            Resource:
              - !Sub arn:aws:s3:::${LoggingBucket}/*
              - !Sub arn:aws:s3:::${LoggingBucket}
            Principal: '*'
            Condition:
              Bool:
                aws:SecureTransport: 'false'

  LogsPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      Path: /
      ManagedPolicyName: !Sub LogsPolicy-${EnvironmentName}
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - logs:CreateLogGroup
              - logs:CreateLogStream
              - logs:PutLogEvents
              - logs:PutRetentionPolicy
            Resource: '*'

  ###############################
  ##### Streamlit Cluster ######
  #############################

  StreamlitCluster:
    Type: AWS::ECS::Cluster
    DependsOn: InitializeBuildCustomResource
    Properties:
      ClusterName: !Join
        - '-'
        - - StreamlitCluster
          - !Ref EnvironmentName
      ClusterSettings:
        - Name: containerInsights
          Value: enabled

  StreamlitImageRepo:
    Type: AWS::ECR::Repository
    Properties:
      EmptyOnDelete: true
      ImageScanningConfiguration:
        ScanOnPush: true


  ##############################
  ##### DataSource Bucket ##### 
  ############################

  DataSourceBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub datasource${AWS::AccountId}-${EnvironmentName}
      LoggingConfiguration:
        DestinationBucketName: !Ref LoggingBucket
        LogFilePrefix: !Sub DataSourceBucket-${EnvironmentName}-logs
      VersioningConfiguration:
        Status: Enabled
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256

  DataSourceBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref DataSourceBucket
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Action:
              - s3:*
            Effect: Deny
            Resource:
              - !Sub arn:aws:s3:::datasource${AWS::AccountId}-${EnvironmentName}/*
              - !Sub arn:aws:s3:::datasource${AWS::AccountId}-${EnvironmentName}
            Principal: '*'
            Condition:
              Bool:
                aws:SecureTransport: 'false'

  ############################
  ##### Security Group ######
  ##########################

  StreamlitALBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: !Sub Allow ${ContainerPort} port from Cloudfront
      VpcId: !Ref VPCId
      Tags:
        - Key: Name
          Value: !Join
            - '-'
            - - StreamlitALBSecurityGroup
              - !Ref EnvironmentName

  ALBSGOutBoundRule:
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      GroupId: !GetAtt StreamlitALBSecurityGroup.GroupId
      IpProtocol: tcp
      FromPort: !Ref ContainerPort
      ToPort: !Ref ContainerPort
      CidrIp: 0.0.0.0/0
      Description: !Sub Allow outbound ${ContainerPort} port

  ALBSGInBoundRule:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !GetAtt StreamlitALBSecurityGroup.GroupId
      IpProtocol: tcp
      FromPort: !Ref ContainerPort
      ToPort: !Ref ContainerPort
      SourcePrefixListId: !FindInMap
        - CFRegionMap
        - !Ref AWS::Region
        - PrefixListCloudFront
      Description: !Sub Allow ${ContainerPort} port from Cloudfront

  StreamlitContainerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow container traffic from ALB
      VpcId: !Ref VPCId
      Tags:
        - Key: Name
          Value: !Join
            - '-'
            - - StreamlitContainerSecurityGroup
              - !Ref EnvironmentName

  ContainerSGOutBoundRule:
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      GroupId: !GetAtt StreamlitContainerSecurityGroup.GroupId
      IpProtocol: tcp
      FromPort: !Ref ContainerPort
      ToPort: !Ref ContainerPort
      DestinationSecurityGroupId: !Ref StreamlitALBSecurityGroup
      Description: !Sub Allow ${ContainerPort} port outbound for all traffic

  ContainerSGInBoundRule:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !GetAtt StreamlitContainerSecurityGroup.GroupId
      IpProtocol: tcp
      FromPort: !Ref ContainerPort
      ToPort: !Ref ContainerPort
      SourceSecurityGroupId: !Ref StreamlitALBSecurityGroup
      Description: !Sub Allow ${ContainerPort} port from ALB SG

  ######################################
  ##### Application LoadBalancer ######
  ####################################

  StreamlitApplicationLoadBalancer:
    DependsOn:
      - LoggingBucketPolicy
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: !Join
        - '-'
        - - StreamlitALB
          - !Ref EnvironmentName
      LoadBalancerAttributes:
        - Key: access_logs.s3.enabled
          Value: true
        - Key: access_logs.s3.bucket
          Value: !Ref LoggingBucket
        - Key: access_logs.s3.prefix
          Value: alb/logs
        - Key: load_balancing.cross_zone.enabled
          Value: true
      Scheme: internet-facing
      Type: application
      Subnets:
        - !Ref PublicSubnetAId
        - !Ref PublicSubnetBId
      SecurityGroups:
        - !Ref StreamlitALBSecurityGroup
      IpAddressType: ipv4

  StreamlitHTTPListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref StreamlitApplicationLoadBalancer
      Port: !Ref ContainerPort
      Protocol: HTTP
      DefaultActions:
        - FixedResponseConfig:
            ContentType: text/plain
            MessageBody: Access denied
            StatusCode: 403
          Type: fixed-response

  StreamlitALBListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      Actions:
        - Type: forward
          TargetGroupArn: !Ref StreamlitContainerTargetGroup
      Conditions:
        - Field: http-header
          HttpHeaderConfig:
            HttpHeaderName: X-Custom-Header
            Values:
              - !Join
                - '-'
                - - !Sub ${AWS::StackName}
                  - !Sub ${AWS::AccountId}
      ListenerArn: !Ref StreamlitHTTPListener
      Priority: 1

  StreamlitContainerTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Port: !Ref ContainerPort
      Protocol: HTTP
      TargetType: ip
      VpcId: !Ref VPCId
      Name: !Join
        - '-'
        - - StreamlitContainerTG
          - !Ref EnvironmentName
      TargetGroupAttributes:
        - Key: stickiness.enabled
          Value: true
        - Key: stickiness.type
          Value: lb_cookie

  ########################
  ##### CloudFront ######
  ######################

  Distribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Origins:
          - ConnectionAttempts: 3
            ConnectionTimeout: 10
            DomainName: !GetAtt StreamlitApplicationLoadBalancer.DNSName
            Id: !Ref StreamlitApplicationLoadBalancer
            OriginCustomHeaders:
              - HeaderName: X-Custom-Header
                HeaderValue: !Join
                  - '-'
                  - - !Sub ${AWS::StackName}
                    - !Sub ${AWS::AccountId}
            CustomOriginConfig:
              HTTPPort: '80'
              OriginProtocolPolicy: http-only
        DefaultCacheBehavior:
          ForwardedValues:
            Cookies:
              Forward: whitelist
              WhitelistedNames:
                - token
            QueryString: true
            QueryStringCacheKeys:
              - code
          Compress: true
          ViewerProtocolPolicy: https-only
          AllowedMethods:
            - HEAD
            - DELETE
            - POST
            - GET
            - OPTIONS
            - PUT
            - PATCH
          CachedMethods:
            - HEAD
            - GET
          CachePolicyId: 658327ea-f89d-4fab-a63d-7e88639e58f6
          OriginRequestPolicyId: 216adef6-5c7f-47e4-b989-5492eafa07d3
          TargetOriginId: !Ref StreamlitApplicationLoadBalancer
        PriceClass: PriceClass_All
        Enabled: true
        HttpVersion: http2
        IPV6Enabled: true
        Logging:
          Bucket: !Sub ${LoggingBucket}.s3.amazonaws.com
          IncludeCookies: true
          Prefix: !Sub distribution-${EnvironmentName}-logs/
        ViewerCertificate:
          CloudFrontDefaultCertificate: true
          MinimumProtocolVersion: TLSv1.2_2021
      Tags:
        - Key: CloudfrontStreamlitApp
          Value: !Sub ${AWS::StackName}-Cloudfront

  ###########################
  ##### CacheStorage ######
  ########################

  DynamoDBTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub templatestorage-atc-${EnvironmentName}
      BillingMode: PROVISIONED
      AttributeDefinitions:
        - AttributeName: sessionId
          AttributeType: S
        - AttributeName: version
          AttributeType: S
      KeySchema:
        - AttributeName: sessionId
          KeyType: HASH
        - AttributeName: version
          KeyType: RANGE
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: true
      SSESpecification:
        SSEEnabled: true
      TimeToLiveSpecification:
        Enabled: true
        AttributeName: ttl

  ######################
  #### ECS Config #####
  ####################

  StreamlitExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Join
        - '-'
        - - StreamlitExecutionRole
          - !Ref EnvironmentName
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy

  StreamlitECSTaskRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Join ["-", ["StreamlitECSTaskRole", !Ref EnvironmentName]]
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: SSMAccessPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - ssm:GetParameter
                Resource:
                  - !Sub arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/streamlitapp/${EnvironmentName}/*
              - Effect: Allow
                Action:
                  - kms:Decrypt
                Resource:
                  - !Sub arn:aws:kms:${AWS::Region}:${AWS::AccountId}:key/alias/aws/ssm
        - PolicyName: BedrockFMAccessPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - bedrock:InvokeModel
                  - bedrock:InvokeModelWithResponseStream
                Resource:
                  - !Sub arn:aws:bedrock:${AWS::Region}::foundation-model/${BedrockModelId}
        - PolicyName: BedrockAgentAccessPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - bedrock:InvokeAgent
                Resource:
                  - !GetAtt AgentStack.Outputs.AgentAliasArn
        - PolicyName: DataBucketAccessPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                Resource:
                  - !Sub arn:aws:s3:::datasource${AWS::AccountId}-${EnvironmentName}/data/*
        - PolicyName: KnowledgeBasePolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - bedrock:Retrieve
                Resource:
                  - !GetAtt KBStack.Outputs.KnowledgeBaseArn
        - PolicyName: DynamoDBPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:GetItem
                  - dynamodb:PutItem
                  - dynamodb:DeleteItem
                  - dynamodb:UpdateItem
                Resource:
                  - !GetAtt DynamoDBTable.Arn

  StreamlitLogGroup:
    DeletionPolicy: Retain
    Type: AWS::Logs::LogGroup
    Properties:
      RetentionInDays: 7

  ################################
  #### ECS Task and Service #####
  ##############################

  StreamlitTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: !Join
        - '-'
        - - StreamlitTaskDefinition
          - !Ref EnvironmentName
      Memory: !Ref Memory
      Cpu: !Ref Cpu
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      RuntimePlatform:
        OperatingSystemFamily: LINUX
      TaskRoleArn: !GetAtt StreamlitECSTaskRole.Arn
      ExecutionRoleArn: !GetAtt StreamlitExecutionRole.Arn
      ContainerDefinitions:
        - Name: !Join
            - '-'
            - - ContainerDefinition
              - !Ref EnvironmentName
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref StreamlitLogGroup
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: ecs
          Image: !Sub ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${StreamlitImageRepo}:latest
          PortMappings:
            - AppProtocol: http
              ContainerPort: !Ref ContainerPort
              HostPort: !Ref ContainerPort
              Name: !Join
                - '-'
                - - streamlit
                  - !Ref ContainerPort
                  - tcp
              Protocol: tcp

  StreamlitECSService:
    DependsOn:
      - StreamlitApplicationLoadBalancer
      - StreamlitALBListenerRule
    Type: AWS::ECS::Service
    Properties:
      ServiceName: !Join
        - '-'
        - - StreamlitECSService
          - !Ref EnvironmentName
      Cluster: !Ref StreamlitCluster
      TaskDefinition: !Ref StreamlitTaskDefinition
      DesiredCount: !Ref Task
      LaunchType: FARGATE
      NetworkConfiguration:
        AwsvpcConfiguration:
          Subnets:
            - !Ref PrivateSubnetAId
            - !Ref PrivateSubnetBId
          SecurityGroups:
            - !Ref StreamlitContainerSecurityGroup
      LoadBalancers:
        - ContainerName: !Join
            - '-'
            - - ContainerDefinition
              - !Ref EnvironmentName
          ContainerPort: !Ref ContainerPort
          TargetGroupArn: !Ref StreamlitContainerTargetGroup

  ###########################
  #### ECS AutoScaling #####
  #########################

  StreamlitAutoScalingTarget:
    Type: AWS::ApplicationAutoScaling::ScalableTarget
    Properties:
      MinCapacity: !Ref Min
      MaxCapacity: !Ref Max
      ResourceId: !Join
        - /
        - - service
          - !Ref StreamlitCluster
          - !GetAtt StreamlitECSService.Name
      ScalableDimension: ecs:service:DesiredCount
      ServiceNamespace: ecs
      RoleARN: !Sub arn:aws:iam::${AWS::AccountId}:role/aws-service-role/ecs.application-autoscaling.amazonaws.com/AWSServiceRoleForApplicationAutoScaling_ECSService

  StreamlitAutoScalingPolicy:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    Properties:
      PolicyName: !Join ['', [AutoScalingPolicy, !Ref EnvironmentName]]
      PolicyType: TargetTrackingScaling
      ScalingTargetId: !Ref StreamlitAutoScalingTarget
      TargetTrackingScalingPolicyConfiguration:
        PredefinedMetricSpecification:
          PredefinedMetricType: ECSServiceAverageCPUUtilization
        ScaleInCooldown: 10
        ScaleOutCooldown: 10
        # Keep things at or lower than 50% CPU utilization, for example
        TargetValue: !Ref TargetCpu

  ##############################
  #### Required Artifacts #####
  ############################

  ArtifactCodeBuildExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Join
        - '-'
        - - ArtifactCodeBuildExecutionRole
          - !Ref EnvironmentName
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - codebuild.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - !GetAtt LogsPolicy.PolicyArn
      Policies:
        - PolicyName: SourceS3AccessPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:PutObject
                  - s3:PutObjectAcl
                  - s3:GetObject
                Resource:
                  - !Sub arn:aws:s3:::datasource${AWS::AccountId}-${EnvironmentName}/*

  ArtifactCodeBuild:
    Type: AWS::CodeBuild::Project
    Properties:
      Name: !Join
        - '-'
        - - ArtifactCodeBuild
          - !Ref EnvironmentName
      Description: CodeBuild for storing artifacts in S3 data source
      Cache:
        Location: LOCAL
        Modes:
          - LOCAL_SOURCE_CACHE
          - LOCAL_DOCKER_LAYER_CACHE
        Type: LOCAL
      Source:
        Type: GITHUB
        Location: !Ref GitURL
        BuildSpec: !Sub
          - |
            version: 0.2
            phases:
              pre_build:
                commands:
                  - pip3 install awscli
              build:
                commands:
                  - echo Build started on `date`
              post_build:
                commands:
                  - cd agents-architecture-to-cloudformation/
                  - aws s3 cp --recursive util/agent s3://${DataBucket}/agent
                  - aws s3 cp --recursive cfn_stack s3://${DataBucket}/cfn_stack
                  - mkdir lambda
                  - cp -r util/prompt_templates prompt_templates/
                  - cd prompt_templates
                  - zip -r ../lambda.zip .
                  - cd ..
                  - cp util/agent/lambda.py lambda.py
                  - zip lambda.zip lambda.py
                  - aws s3 cp lambda.zip s3://${DataBucket}/agent/lambda.zip
                  - echo Build completed on `date`
          - DataBucket: !Sub datasource${AWS::AccountId}-${EnvironmentName}
      Environment:
        Type: LINUX_CONTAINER
        Image: aws/codebuild/amazonlinux2-x86_64-standard:5.0
        ComputeType: BUILD_GENERAL1_SMALL
      ServiceRole: !GetAtt ArtifactCodeBuildExecutionRole.Arn
      TimeoutInMinutes: 10
      Artifacts:
        Type: NO_ARTIFACTS

  ArtifactCodeBuildLogGroup:
    DeletionPolicy: Retain
    Type: AWS::Logs::LogGroup
    Properties:
      RetentionInDays: 7

  ###################################
  ##### CodeBuild Docker Build #####
  #################################

  StreamlitCodeBuildExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Join
        - '-'
        - - StreamlitInitCodeBuildRole
          - !Ref EnvironmentName
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - codebuild.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - !GetAtt LogsPolicy.PolicyArn
      Policies:
        - PolicyName: ECRAccesPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - ecr:GetAuthorizationToken
                Resource:
                  - '*'
              - Effect: Allow
                Action:
                  - ecr:UploadLayerPart
                  - ecr:PutImage
                  - ecr:InitiateLayerUpload
                  - ecr:CompleteLayerUpload
                  - ecr:BatchCheckLayerAvailability
                Resource:
                  - !GetAtt StreamlitImageRepo.Arn

  StreamlitCodeBuild:
    Type: AWS::CodeBuild::Project
    Properties:
      Name: !Join
        - '-'
        - - StreamlitInitCodeBuild
          - !Ref EnvironmentName
      Description: CodeBuild for building image
      Cache:
        Location: LOCAL
        Modes:
          - LOCAL_SOURCE_CACHE
          - LOCAL_DOCKER_LAYER_CACHE
        Type: LOCAL
      Source:
        Type: GITHUB
        Location: !Ref GitURL
        BuildSpec: !Sub
          - |
            version: 0.2
            phases:
              pre_build:
                commands:
                  - pip3 install awscli
                  - aws ecr get-login-password --region ${AWS::Region} | docker login --username AWS --password-stdin ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com
              build:
                commands:
                  - echo Build started on `date`
                  - cd agents-architecture-to-cloudformation/
                  - printf '\n' >> Dockerfile
                  - printf 'ENTRYPOINT ["streamlit", "run", "app.py", "--server.port=${ContainerPort}", "--", "--environmentName", "${EnvironmentName}", "--GitURL", "${GitURL}"]' >> Dockerfile
                  - cat Dockerfile
                  - docker build -t ${StreamlitImageRepo} .
                  - docker tag ${StreamlitImageRepo}:latest ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${StreamlitImageRepo}:latest
              post_build:
                commands:
                  - echo Build completed on `date`
                  - docker push ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${StreamlitImageRepo}:latest
          - StreamlitImageRepo: !Ref StreamlitImageRepo
      Environment:
        Type: LINUX_CONTAINER
        Image: aws/codebuild/amazonlinux2-x86_64-standard:5.0
        ComputeType: BUILD_GENERAL1_SMALL
      ServiceRole: !GetAtt StreamlitCodeBuildExecutionRole.Arn
      TimeoutInMinutes: 10
      Artifacts:
        Type: NO_ARTIFACTS

  StreamlitCodeBuildLogGroup:
    DeletionPolicy: Retain
    Type: AWS::Logs::LogGroup
    Properties:
      RetentionInDays: 7

  #######################################
  ##### Custom Resource Initialize #####
  #####################################

  InitializeBuildCustomResourceRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Join
        - '-'
        - - InitializeBuildResourceRole
          - !Ref EnvironmentName
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
      ManagedPolicyArns:
        - !GetAtt LogsPolicy.PolicyArn
      Policies:
        - PolicyName: CodeBuildPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - codebuild:StartBuild
                  - codebuild:BatchGetBuilds
                Resource:
                  - !GetAtt ArtifactCodeBuild.Arn
                  - !GetAtt StreamlitCodeBuild.Arn
        - PolicyName: S3AccessPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:                  
              - Effect: Allow
                Action:
                  - s3:ListBucket
                  - s3:DeleteObject
                  - s3:DeleteObjectVersion
                  - s3:ListBucketVersions
                Resource:
                  - !Sub arn:aws:s3:::datasource${AWS::AccountId}-${EnvironmentName}/*
                  - !Sub arn:aws:s3:::datasource${AWS::AccountId}-${EnvironmentName}
        - PolicyName: IAMCreatePolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - iam:ListRoles
                Resource:
                  - '*'
              - Effect: Allow
                Action:
                  - iam:GetRole
                  - iam:CreateServiceLinkedRole
                  - iam:AttachRolePolicy
                Resource:
                  - '*'

  InitializeBuildCustomResourceFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Join
        - '-'
        - - InitializeBuildResourceF
          - !Ref EnvironmentName
      Handler: index.handler
      Role: !GetAtt InitializeBuildCustomResourceRole.Arn
      Timeout: 600
      Runtime: python3.12
      Code:
        ZipFile: !Sub |
          import boto3
          from time import sleep
          import cfnresponse
          codebuild = boto3.client("codebuild")
          iam_client = boto3.client('iam')
          def clean_bucket(event):
            try:
              bucket = boto3.resource("s3").Bucket(event['ResourceProperties']['DATABUCKET'])
              bucket.object_versions.delete()
              bucket.objects.all().delete()
            except Exception as ex:
              print(ex)
          def start_codebuild(build_id):
            status = 'STARTING'
            while status not in ['SUCCEEDED', 'FAILED', 'STOPPED', 'FAULT', 'TIMED_OUT']:
              status = codebuild.batch_get_builds(ids=[build_id])['builds'][0]['buildStatus']
              sleep(15)
            if status in ['FAILED', 'STOPPED', 'FAULT', 'TIMED_OUT']:
              raise Exception("Build failed")
            return
          def handler(event, context):
            try:
              request_type = event['RequestType']
              if request_type == 'Create':
                desired_ecs_role_name = "AWSServiceRoleForECS"
                desired_ecs_scaling_role_name = "AWSServiceRoleForApplicationAutoScaling_ECSService"

                try:
                  iam_client.get_role(RoleName=desired_ecs_role_name)
                  ecs_role_exists = True
                except ClientError as e:
                  if e.response['Error']['Code'] == 'NoSuchEntity':
                    ecs_role_exists = False
                  else:
                    ecs_role_exists = True
                
                try:
                  iam_client.get_role(RoleName=desired_ecs_scaling_role_name)
                  ecs_scaling_role_exists = True
                except ClientError as e:
                  if e.response['Error']['Code'] == 'NoSuchEntity':
                    ecs_scaling_role_exists = False
                  else:
                    ecs_scaling_role_exists = True
                
                print(f"ECS service role exist? {ecs_role_exists}")
                if not ecs_role_exists:
                  iam_client.create_service_linked_role(AWSServiceName="ecs.amazonaws.com")
                
                print(f"ECS scaling service role exist? {ecs_scaling_role_exists}")
                if not ecs_scaling_role_exists:
                  iam_client.create_service_linked_role(AWSServiceName="ecs.application-autoscaling.amazonaws.com")
                
                start_codebuild(codebuild.start_build(projectName=event['ResourceProperties']['ARTIFACTPROJECT'])['build']['id'])
                start_codebuild(codebuild.start_build(projectName=event['ResourceProperties']['INITPROJECT'])['build']['id'])
              
              elif request_type == 'Delete':
                clean_bucket(event)
            except Exception as ex:
              print(ex)
              clean_bucket(event)
              cfnresponse.send(event, context, cfnresponse.FAILED, {})
            else:
              cfnresponse.send(event, context, cfnresponse.SUCCESS, {})

  InitializeBuildCustomResource:
    Type: Custom::BuildCode
    Properties:
      ServiceToken: !GetAtt InitializeBuildCustomResourceFunction.Arn
      ARTIFACTPROJECT: !Ref ArtifactCodeBuild
      INITPROJECT: !Ref StreamlitCodeBuild
      DATABUCKET: !Sub datasource${AWS::AccountId}-${EnvironmentName}

  ###########################################
  ##### Custom Resource Clean Resource #####
  #########################################

  StreamlitCleanCustomResourceRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Join
        - '-'
        - - CleanResourceRole
          - !Ref EnvironmentName
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
      ManagedPolicyArns:
        - !GetAtt LogsPolicy.PolicyArn
      Policies:
        - PolicyName: S3DeleteObjectPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:ListBucket
                  - s3:DeleteObject
                  - s3:DeleteObjectVersion
                  - s3:ListBucketVersions
                Resource:
                  - !Sub arn:aws:s3:::${DataSourceBucket}/*
                  - !Sub arn:aws:s3:::${DataSourceBucket}

  StreamlitCleanCustomResourceFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Join
        - '-'
        - - CleanResourceF
          - !Ref EnvironmentName
      Handler: index.handler
      Role: !GetAtt StreamlitCleanCustomResourceRole.Arn
      Timeout: 300
      Runtime: python3.12
      Code:
        ZipFile: |
          import boto3
          from time import sleep
          import cfnresponse
          from botocore.exceptions import ClientError
          def handler(event, context):
            try:
              request_type = event['RequestType']
              if request_type == 'Delete':
                bucket = boto3.resource("s3").Bucket(event['ResourceProperties']['DATABUCEKT'])
                bucket.object_versions.delete()
                bucket.objects.all().delete()
            except Exception as ex:
              print(ex)
              cfnresponse.send(event, context, cfnresponse.FAILED, {})
            else:
              cfnresponse.send(event, context, cfnresponse.SUCCESS, {})

  StreamlitCleanCustomResource:
    Type: Custom::BuildCode
    Properties:
      ServiceToken: !GetAtt StreamlitCleanCustomResourceFunction.Arn
      DATABUCEKT: !Sub datasource${AWS::AccountId}-${EnvironmentName}

Outputs:
  CloudfrontURL:
    Description: CloudFront URL
    Value: !GetAtt Distribution.DomainName
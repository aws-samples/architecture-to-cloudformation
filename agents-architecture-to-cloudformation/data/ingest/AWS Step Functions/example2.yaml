AWSTemplateFormatVersion: '2010-09-09'
Description: >
  This CloudFormation stack sets up a serverless data processing pipeline using AWS Step Functions and AWS Lambda.
  It executes a parallel state machine that invokes Lambda functions to summarize data and generate action items.
  The processed data is stored in an S3 bucket and a DynamoDB table.

Parameters:

  BucketName:
    Type: String
    Description: Name of the S3 bucket for storing processed data

Resources:

  # DynamoDB Table
  DynamoDBTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub DataProcessingTable-${AWS::StackName}
      BillingMode: PROVISIONED
      AttributeDefinitions:
        - AttributeName: timestamp
          AttributeType: S
      KeySchema:
        - AttributeName: timestamp
          KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: true
      SSESpecification:
        SSEEnabled: true

  LoggingBucket: 
    Type: "AWS::S3::Bucket"
    DeletionPolicy: Retain
    Properties:
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      OwnershipControls:
        Rules:
          - ObjectOwnership: BucketOwnerPreferred
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      VersioningConfiguration:
        Status: Enabled

  LoggingBucketPolicy:
    Type: 'AWS::S3::BucketPolicy'
    DeletionPolicy: Retain
    Properties:
      Bucket: !Ref LoggingBucket
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Action:
              - 's3:PutObject'
            Effect: Allow
            Principal:
              Service: logging.s3.amazonaws.com
            Resource: 
              - !Sub arn:aws:s3:::${LoggingBucket}/*
          - Action:
              - 's3:*'
            Effect: Deny
            Resource: 
              - !Sub arn:aws:s3:::${LoggingBucket}/*
              - !Sub arn:aws:s3:::${LoggingBucket}
            Principal: "*"
            Condition:
              Bool:
                'aws:SecureTransport': 'false'
  # S3 Bucket
  S3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      LoggingConfiguration:
        DestinationBucketName: !Ref LoggingBucket
        LogFilePrefix: bucket-logs
      VersioningConfiguration:
        Status: Enabled
      BucketName: !Join ["-", [!Ref BucketName, !Ref AWS::AccountId]]
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256

  S3BucketPolicy:
    Type: 'AWS::S3::BucketPolicy'
    Properties:
      Bucket: !Ref S3Bucket
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Action:
              - 's3:*'
            Effect: Deny
            Resource: 
              - !Sub arn:aws:s3:::${S3Bucket}/*
              - !Sub arn:aws:s3:::${S3Bucket}
            Principal: "*"
            Condition:
              Bool:
                'aws:SecureTransport': 'false'
  # Lambda Function: SummarizeData
  SummarizeDataFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: SummarizeData
      Runtime: python3.12
      Handler: index.lambda_handler
      Role: !GetAtt SummarizeDataFunctionRole.Arn
      Environment:
        Variables:
          S3_BUCKET_NAME: !Ref BucketName
      Code:
        ZipFile: |
          import boto3
          import json
          import os

          s3 = boto3.client('s3')
          bucket_name = os.environ['S3_BUCKET_NAME']

          def lambda_handler(event, context):
              # Summarize data logic
              summary = 'This is a sample summary'

              # Write summary to S3
              s3.put_object(
                  Bucket=bucket_name,
                  Key='summary.txt',
                  Body=summary
              )

              return {
                  'statusCode': 200,
                  'body': json.dumps('Data summarization completed successfully')
              }

  # Lambda Function: ActionItemData
  ActionItemDataFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub ActionItemData-${AWS::StackName}
      Runtime: python3.12
      Handler: index.lambda_handler
      Role: !GetAtt ActionItemDataFunctionRole.Arn
      Environment:
        Variables:
          S3_BUCKET_NAME: !Ref BucketName
      Code:
        ZipFile: |
          import boto3
          import json
          import os

          s3 = boto3.client('s3')
          bucket_name = os.environ['S3_BUCKET_NAME']

          def lambda_handler(event, context):
              # Generate action items logic
              action_items = 'This is a sample action item'

              # Write action items to S3
              s3.put_object(
                  Bucket=bucket_name,
                  Key='action_items.txt',
                  Body=action_items
              )

              return {
                  'statusCode': 200,
                  'body': json.dumps('Action items generation completed successfully')
              }

  # Lambda Function: CheckpointData
  CheckpointDataFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub CheckpointData-${AWS::StackName}
      Runtime: python3.12
      Handler: index.lambda_handler
      Role: !GetAtt CheckpointDataFunctionRole.Arn
      Code:
        ZipFile: |
          import boto3
          import time

          dynamodb = boto3.resource('dynamodb')
          table = dynamodb.Table('DataProcessingTable')

          def lambda_handler(event, context):
              # Process data from previous Lambda functions
              processed_data = {
                  'timestamp': str(int(time.time())),
                  # ... other data processing logic
              }

              # Store processed data in DynamoDB
              table.put_item(Item=processed_data)

              return {
                  'statusCode': 200,
                  'body': 'Data checkpoint completed successfully'
              }

  # Lambda Role: SummarizeData
  SummarizeDataFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: 'sts:AssumeRole'
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: S3WriteAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 's3:PutObject'
                Resource: !Join ['', ['arn:aws:s3:::', !Ref BucketName, '/*']]

  # Lambda Role: ActionItemData
  ActionItemDataFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: 'sts:AssumeRole'
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: S3WriteAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 's3:PutObject'
                Resource: !Join ['', ['arn:aws:s3:::', !Ref BucketName, '/*']]

  # Lambda Role: CheckpointData
  CheckpointDataFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: 'sts:AssumeRole'
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: DynamoDBAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 'dynamodb:PutItem'
                Resource: !GetAtt DynamoDBTable.Arn

  # Step Functions State Machine
  DataProcessingStateMachine:
    Type: AWS::StepFunctions::StateMachine
    Properties:
      StateMachineName: !Sub DataProcessingStateMachine-${AWS::StackName}
      DefinitionString:
        !Sub
          - |-
            {
              "StartAt": "Parallel",
              "States": {
                "Parallel": {
                  "Type": "Parallel",
                  "Branches": [
                    {
                      "StartAt": "SummarizeData",
                      "States": {
                        "SummarizeData": {
                          "Type": "Task",
                          "Resource": "${SummarizeDataFunctionArn}",
                          "End": true
                        }
                      }
                    },
                    {
                      "StartAt": "ActionItemData",
                      "States": {
                        "ActionItemData": {
                          "Type": "Task",
                          "Resource": "${ActionItemDataFunctionArn}",
                          "End": true
                        }
                      }
                    }
                  ],
                  "Next": "CheckpointData"
                },
                "CheckpointData": {
                  "Type": "Task",
                  "Resource": "${CheckpointDataFunctionArn}",
                  "End": true
                }
              }
            }
          - {
              SummarizeDataFunctionArn: !GetAtt SummarizeDataFunction.Arn,
              ActionItemDataFunctionArn: !GetAtt ActionItemDataFunction.Arn,
              CheckpointDataFunctionArn: !GetAtt CheckpointDataFunction.Arn
            }
      RoleArn: !GetAtt StateMachineRole.Arn

  # Step Functions Role
  StateMachineRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: states.amazonaws.com
            Action: 'sts:AssumeRole'
      Policies:
        - PolicyName: InvokeLambdaPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 'lambda:InvokeFunction'
                Resource:
                  - !GetAtt SummarizeDataFunction.Arn
                  - !GetAtt ActionItemDataFunction.Arn
                  - !GetAtt CheckpointDataFunction.Arn
        - PolicyName: XRayAccessPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - xray:PutTraceSegments
                  - xray:PutTelemetryRecords
                  - xray:GetSamplingRules
                  - xray:GetSamplingTargets
                Resource:
                  - "*"

Outputs:
  DynamoDBTableName:
    Description: Name of the DynamoDB table
    Value: !Ref DynamoDBTable

  S3BucketName:
    Description: Name of the S3 bucket
    Value: !Ref BucketName

  StateMachineArn:
    Description: ARN of the Step Functions State Machine
    Value: !Ref DataProcessingStateMachine
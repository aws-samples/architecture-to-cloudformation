AWSTemplateFormatVersion: 2010-09-09
Description: >
  This CloudFormation stack provisions an AWS infrastructure for running a Docker container on an ECS Fargate cluster. 
  It includes an Application Load Balancer (ALB) with a CloudFront distribution in front, auto-scaling based on CPU utilization, 
  and logging configurations. The infrastructure is highly available, scalable, and secure, making it suitable for 
  hosting web applications or APIs.
  This template is not production ready and should only be used for inspiration.
Metadata:
    'AWS::CloudFormation::Interface':
        ParameterGroups:
        - Label:
            default: 'Container Configuration'
          Parameters:
          - Cpu
          - Memory
          - DockerImageURI
          - ContainerPort
        - Label:
            default: 'Environment Configuration'
          Parameters:
          - EnvironmentName
        - Label:
            default: 'Autoscaling'
          Parameters:
          - DesiredCount
          - Min
          - Max
          - TargetValue
        - Label:
            default: 'Infrastructure'
          Parameters:
          - VPC
          - PublicSubnetA
          - PublicSubnetB
          - PrivateSubnetA
          - PrivateSubnetB

Parameters:
    DockerImageURI:
        Description: Image URI
        Type: String
        Default: <AccountId>.dkr.ecr.us-east-1.amazonaws.com/<Repo_Name>

    Cpu:
        Description: "CPU of Fargate Task. Make sure you put valid Memory and CPU pair, refer: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ecs-taskdefinition.html#cfn-ecs-taskdefinition-cpu:~:text=requires%3A%20Replacement-,Cpu,-The%20number%20of"
        Type: Number
        Default: 512
        AllowedValues:
        - 256
        - 512
        - 1024
        - 2048
        - 4096

    Memory:
        Description: "Memory of Fargate Task.  Make sure you put valid Memory and CPU pair, refer: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ecs-taskdefinition.html#cfn-ecs-taskdefinition-cpu:~:text=requires%3A%20Replacement-,Cpu,-The%20number%20of"
        Type: Number
        Default: 1024
        AllowedValues:
            - 512
            - 1024
            - 2048
            - 3072
            - 4096
            - 5120
            - 6144
            - 7168
            - 8192
            - 16384
            - 30720

    DesiredCount:
        Description: Desired Docker task count
        Type: Number
        Default: 2

    Min:
        Description: Minimum containers for Autoscaling. Should be less than or equal to DesiredTaskCount
        Type: Number
        Default: 2

    Max:
        Description: Maximum containers for Autoscaling. Should be greater than or equal to DesiredTaskCount
        Type: Number
        Default: 5

    TargetValue:
        Description: CPU Utilization Target
        Type: Number
        Default: 80

    EnvironmentName:
        Description: Unique name to distinguish different web application min chars 1 and max chars 4
        Type: String
        MinLength: 1
        MaxLength: 4

    VPC:
        Description: VPC ID
        Type: String
        MinLength: 1

    PublicSubnetA:
        Description: Public Subnet A ID for Application Load Balancer
        Type: String
        MinLength: 1

    PublicSubnetB:
        Description: Public Subnet B ID for Application Load Balancer
        Type: String
        MinLength: 1

    PrivateSubnetA:
        Description: Private Subnet B ID for ECS Task
        Type: String
        MinLength: 1

    PrivateSubnetB:
        Description: Private Subnet B ID for ECS Task
        Type: String
        MinLength: 1

    ContainerPort:
        Description: Port for Docker host and container
        Type: Number
        Default: 80

Mappings:
    # Cloudfront Mappings
    CFRegionMap:
        us-east-1:
        PrefixListCloudFront: pl-3b927c52
        us-west-2:
        PrefixListCloudFront: pl-82a045eb

    # Cloudfront Mappings
    ELBRegionMap:
        us-east-1:
        ELBAccountId: '127311923021'
        us-west-2:
        ELBAccountId: '797873946194'


Resources:
    # ECS Cluster
    ECSCluster:
        Type: AWS::ECS::Cluster
        DependsOn: ECSRoleCustomResource
        Properties:
            ClusterName: !Join
                - '-'
                - - StreamlitCluster
                - !Ref EnvironmentName
            ClusterSettings:
                - 
                    Name: containerInsights
                    Value: enabled

    # Logs Policy
    LogsPolicy:
        Type: "AWS::IAM::ManagedPolicy"
        Properties:
            Path: /
            PolicyDocument:
                Version: '2012-10-17'
                Statement:
                - 
                    Effect: 'Allow'
                    Action:
                    - 'logs:CreateLogGroup'
                    - 'logs:CreateLogStream'
                    - 'logs:PutLogEvents'
                    - 'logs:PutRetentionPolicy'
                    Resource: '*'

    LogGroup:
        DeletionPolicy: Retain
        Type: AWS::Logs::LogGroup
        Properties:
            RetentionInDays: 7

    LoggingBucket: 
        Type: "AWS::S3::Bucket"
        DeletionPolicy: Retain
        Properties:
            OwnershipControls:
                Rules:
                - ObjectOwnership: BucketOwnerPreferred
            PublicAccessBlockConfiguration:
                BlockPublicAcls: true
                BlockPublicPolicy: true
                IgnorePublicAcls: true
                RestrictPublicBuckets: true
            VersioningConfiguration:
                Status: Enabled
            BucketEncryption:
                ServerSideEncryptionConfiguration:
                - ServerSideEncryptionByDefault:
                    SSEAlgorithm: AES256

    LoggingBucketPolicy:
        Type: AWS::S3::BucketPolicy
        DeletionPolicy: Retain
        Properties:
            Bucket: !Ref LoggingBucket
            PolicyDocument:
                Version: '2012-10-17'
                Statement:
                    - 
                        Action:
                        - s3:PutObject
                        Effect: Allow
                        Principal:
                        Service: logging.s3.amazonaws.com
                        Resource:
                            - !Sub arn:aws:s3:::${LoggingBucket}/*
                    - 
                        Action:
                        - s3:PutObject
                        Effect: Allow
                        Principal:
                        AWS: !Sub
                            - arn:aws:iam::${ElbAccount}:root
                            - ElbAccount: !FindInMap
                                - ELBRegionMap
                                - !Ref AWS::Region
                                - ELBAccountId
                        Resource:
                        - !Sub arn:aws:s3:::${LoggingBucket}/alb/logs/AWSLogs/${AWS::AccountId}/*
                    - 
                        Action:
                        - s3:*
                        Effect: Deny
                        Resource:
                        - !Sub arn:aws:s3:::${LoggingBucket}/*
                        - !Sub arn:aws:s3:::${LoggingBucket}
                        Principal: '*'
                        Condition:
                        Bool:
                            aws:SecureTransport: 'false'

    # Custom Resource to create AWSServiceRoleForECS if not exist
    CustomFunctionRole:
        Type: AWS::IAM::Role
        Properties:
            RoleName: !Join ['-', ['CustomFunctionRole', !Ref EnvironmentName]]
            AssumeRolePolicyDocument:
                Version: '2012-10-17'
                Statement:
                - 
                    Effect: 'Allow'
                    Principal:
                        Service: lambda.amazonaws.com
                    Action:
                    - 'sts:AssumeRole'
            Path: "/"
            ManagedPolicyArns:
                - !GetAtt LogsPolicy.PolicyArn  
            Policies:
                - 
                    PolicyName: IAMPolicy
                    PolicyDocument:
                        Version: '2012-10-17'
                        Statement:
                        - 
                            Effect: Allow
                            Action:
                            - iam:ListRoles
                            Resource:
                            - "*"
                        - 
                            Effect: Allow
                            Action:
                            - iam:GetRole
                            - iam:CreateServiceLinkedRole
                            - iam:AttachRolePolicy
                            Resource:
                            - "*"
                        
    CustomFunction:
        Type: "AWS::Lambda::Function"
        Properties:
            Handler: index.handler
            Role: !GetAtt CustomFunctionRole.Arn
            Timeout: 300
            Runtime: python3.12
            Code:
                ZipFile: !Sub |
                    import boto3
                    from botocore.exceptions import ClientError
                    import cfnresponse
                    iam_client = boto3.client('iam')

                    def handler(event, context):
                        
                        try:
                            request_type = event['RequestType']
                            print(request_type)

                            if request_type == 'Create':
                                desired_role_name = "AWSServiceRoleForECS"

                                try:
                                    iam_client.get_role(RoleName=desired_role_name)
                                    role_exists = True
                                except ClientError as e:
                                    if e.response['Error']['Code'] == 'NoSuchEntity':
                                        role_exists = False
                                    else:
                                        role_exists = True

                                print(role_exists)
                                if not role_exists:
                                    iam_client.create_service_linked_role(AWSServiceName="ecs.amazonaws.com")
                        except Exception as ex:
                            print(ex)
                            cfnresponse.send(event, context, cfnresponse.FAILED, {})
                        else:
                            cfnresponse.send(event, context, cfnresponse.SUCCESS, {})

    ECSRoleCustomResource:
        Type: Custom::ECSRoleCustomResource
        Properties:
            ServiceToken: !GetAtt CustomFunction.Arn

    # ECS task resources
    ExecutionRole:
        Type: AWS::IAM::Role
        Properties:
            RoleName: !Join ['-', ['ExecutionRole', !Ref EnvironmentName]]
            AssumeRolePolicyDocument:
                Statement:
                - 
                    Effect: Allow
                    Principal:
                        Service: ecs-tasks.amazonaws.com
                    Action: 'sts:AssumeRole'
            ManagedPolicyArns:
                - 'arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy'

    TaskRole:
        Type: AWS::IAM::Role
        Properties:
            RoleName: !Join ['-', ['TaskRole', !Ref EnvironmentName]]
            AssumeRolePolicyDocument:
                Statement:
                - 
                    Effect: Allow
                    Principal:
                        Service: ecs-tasks.amazonaws.com
                    Action: 'sts:AssumeRole'

    TaskDefinition:
        Type: AWS::ECS::TaskDefinition
        Properties: 
            Family: !Join ['-', ['TaskDefinition', !Ref EnvironmentName]]
            Memory: !Ref Memory
            Cpu: !Ref Cpu
            NetworkMode: awsvpc
            RequiresCompatibilities:
                - 'FARGATE'
            RuntimePlatform:
                OperatingSystemFamily: LINUX   
            TaskRoleArn: !GetAtt TaskRole.Arn
            ExecutionRoleArn: !GetAtt ExecutionRole.Arn
            ContainerDefinitions: 
                - 
                    Name: !Join ['-', ['ContainerDefinition', !Ref EnvironmentName]]
                    LogConfiguration:
                        LogDriver: "awslogs"
                        Options: 
                            awslogs-group: !Ref LogGroup
                            awslogs-region: !Ref AWS::Region
                            awslogs-stream-prefix: "ecs"
                    Image: !Ref DockerImageURI
                    PortMappings:
                        - 
                            AppProtocol: "http"
                            ContainerPort: !Ref ContainerPort
                            HostPort: !Ref ContainerPort
                            Name: !Join ['-', ['app', !Ref ContainerPort, 'tcp']]
                            Protocol: "tcp"

    ECSService:
        DependsOn: 
        - ApplicationLoadBalancer
        - ALBListenerRule
        Type: AWS::ECS::Service
        Properties:
            ServiceName: !Join ['-', ['ECSService', !Ref EnvironmentName]]
            Cluster: !Ref ECSCluster
            TaskDefinition: !Ref TaskDefinition
            DesiredCount: !Ref DesiredCount
            LaunchType: FARGATE
            NetworkConfiguration: 
                AwsvpcConfiguration:
                    Subnets:
                        - !Ref PrivateSubnetA
                        - !Ref PrivateSubnetB
                    SecurityGroups:
                        - !Ref ContainerSecurityGroup
            LoadBalancers:
                - 
                    ContainerName: !Join ['-', ['ContainerDefinition', !Ref EnvironmentName]]
                    ContainerPort: !Ref ContainerPort
                    TargetGroupArn: !Ref ContainerTargetGroup

    # AutoScaling
    AutoScalingRole:
        Type: AWS::IAM::Role
        Properties:
            RoleName: !Join ['-', [AutoScalingRole, !Ref EnvironmentName]]
            AssumeRolePolicyDocument:
                Statement:
                - 
                    Effect: Allow
                    Principal:
                        Service: ecs-tasks.amazonaws.com
                    Action: 'sts:AssumeRole'
            ManagedPolicyArns:
                - 'arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceAutoscaleRole'

    AutoScalingTarget:
        Type: AWS::ApplicationAutoScaling::ScalableTarget
        Properties:
            MinCapacity: !Ref Min
            MaxCapacity: !Ref Max
            ResourceId: !Join ['/', [service, !Ref ECSCluster, !GetAtt ECSService.Name]]
            ScalableDimension: ecs:service:DesiredCount
            ServiceNamespace: ecs
            # "The Amazon Resource Name (ARN) of an AWS Identity and Access Management (IAM) role that allows Application Auto Scaling to modify your scalable target."
            RoleARN: !GetAtt AutoScalingRole.Arn

    AutoScalingPolicy:
        Type: AWS::ApplicationAutoScaling::ScalingPolicy
        Properties:
            PolicyName: !Join ['', [AutoScalingPolicy, !Ref EnvironmentName]]
            PolicyType: TargetTrackingScaling
            ScalingTargetId: !Ref AutoScalingTarget
            TargetTrackingScalingPolicyConfiguration:
                PredefinedMetricSpecification:
                    PredefinedMetricType: ECSServiceAverageCPUUtilization
                ScaleInCooldown: 10
                ScaleOutCooldown: 10
                TargetValue: !Ref TargetValue

    # Security Group
    ALBSecurityGroup:
        Type: AWS::EC2::SecurityGroup
        Properties:
            GroupDescription: !Sub Allow 80 port from Cloudfront
            VpcId: !Ref VPC
            Tags:
                - 
                    Key: Name
                    Value: !Join ['-', ['ALBSecurityGroup', !Ref EnvironmentName]]

    ALBSGOutBoundRule:
        Type: AWS::EC2::SecurityGroupEgress
        Properties:
            GroupId: !GetAtt ALBSecurityGroup.GroupId
            IpProtocol: tcp
            FromPort: 80
            ToPort: 80
            CidrIp: 0.0.0.0/0
            Description: !Sub Allow outbound 80 port

    ALBSGInBoundRule:
        Type: AWS::EC2::SecurityGroupIngress
        Properties:
            GroupId: !GetAtt ALBSecurityGroup.GroupId
            IpProtocol: tcp
            FromPort: 80
            ToPort: 80
            SourcePrefixListId: !FindInMap
                - CFRegionMap
                - !Ref AWS::Region
                - PrefixListCloudFront
            Description: !Sub Allow 80 port from Cloudfront

    ContainerSecurityGroup:
        Type: AWS::EC2::SecurityGroup
        Properties:
            GroupDescription: Allow container traffic from ALB
            VpcId: !Ref VPC
            Tags:
                - 
                    Key: Name
                    Value: !Join ['-', ['ContainerSecurityGroup', !Ref EnvironmentName]]

    ContainerSGOutBoundRule:
        Type: AWS::EC2::SecurityGroupEgress
        Properties:
            GroupId: !GetAtt ContainerSecurityGroup.GroupId
            IpProtocol: tcp
            FromPort: 80
            ToPort: 80
            DestinationSecurityGroupId: !Ref ALBSecurityGroup
            Description: !Sub Allow 80 port outbound for all traffic

    ContainerSGInBoundRule:
        Type: AWS::EC2::SecurityGroupIngress
        Properties:
            GroupId: !GetAtt ContainerSecurityGroup.GroupId
            IpProtocol: tcp
            FromPort: 80
            ToPort: 80
            SourceSecurityGroupId: !Ref ALBSecurityGroup
            Description: !Sub Allow 80 port from ALB SG

    # Load Balancer
    ContainerTargetGroup:
        Type: "AWS::ElasticLoadBalancingV2::TargetGroup"
        Properties:
            Port: 80
            Protocol: "HTTP"
            TargetType: ip
            VpcId: !Ref VPC
            Name: !Join ['-', ['ContainerTargetGroup', !Ref EnvironmentName]]

    ApplicationLoadBalancer:
        Type: "AWS::ElasticLoadBalancingV2::LoadBalancer"
        Properties:
            Name: !Join ['-', ['ALB', !Ref EnvironmentName]]
            LoadBalancerAttributes:
                - Key: access_logs.s3.enabled
                  Value: true
                - Key: access_logs.s3.bucket
                  Value: !Ref LoggingBucket
                - Key: access_logs.s3.prefix
                  Value: alb/logs
                - Key: load_balancing.cross_zone.enabled
                  Value: true
            Scheme: internet-facing
            Type: application
            Subnets: 
                - !Ref PublicSubnetA
                - !Ref PublicSubnetB
            SecurityGroups: 
                - !Ref ALBSecurityGroup
            IpAddressType: ipv4

    HTTPListener:
        Type: "AWS::ElasticLoadBalancingV2::Listener"
        Properties:
            LoadBalancerArn: !Ref ApplicationLoadBalancer
            Port: 80
            Protocol: HTTP
            DefaultActions: 
                - FixedResponseConfig:
                    ContentType: text/plain
                    MessageBody: Access denied
                    StatusCode: 403
                  Type: fixed-response

    ALBListenerRule:
        Type: AWS::ElasticLoadBalancingV2::ListenerRule
        Properties: 
            Actions: 
                - 
                    Type: forward
                    TargetGroupArn: !Ref ContainerTargetGroup
            Conditions: 
                - 
                    Field: http-header
                    HttpHeaderConfig:
                        HttpHeaderName: X-Custom-Header
                        Values: 
                        - !Join ['-', [!Sub "${AWS::StackName}", !Sub "${AWS::AccountId}"]]
            ListenerArn: !Ref HTTPListener
            Priority: 1
    
    CloudFrontWebACL:
        Type: "AWS::WAFv2::WebACL"
        Properties:
            Description: Web ACL to protect CloudFront front end website
            DefaultAction: 
                Allow: {}
            VisibilityConfig: 
                SampledRequestsEnabled: true
                CloudWatchMetricsEnabled: true
                MetricName: "CloudFrontWebACL"
            Scope: "CLOUDFRONT"
            Rules: 
                -
                    Name: "AWS-AWSManagedRulesAmazonIpReputationList"
                    Priority: 0
                    OverrideAction: 
                        None: {}
                    Statement: 
                        ManagedRuleGroupStatement: 
                            VendorName: "AWS"
                            Name: "AWSManagedRulesAmazonIpReputationList"
                    VisibilityConfig: 
                        SampledRequestsEnabled: true
                        CloudWatchMetricsEnabled: true
                        MetricName: "AWS-AWSManagedRulesAmazonIpReputationList"
                - 
                    Name: "AWS-AWSManagedRulesCommonRuleSet"
                    Priority: 1
                    OverrideAction: 
                        None: {}
                    Statement: 
                        ManagedRuleGroupStatement: 
                            VendorName: "AWS"
                            Name: "AWSManagedRulesCommonRuleSet"
                    VisibilityConfig: 
                        SampledRequestsEnabled: true
                        CloudWatchMetricsEnabled: true
                        MetricName: "AWS-AWSManagedRulesCommonRuleSet"
                - 
                    Name: "AWS-AWSManagedRulesKnownBadInputsRuleSet"
                    Priority: 2
                    OverrideAction: 
                        None: {}
                    Statement: 
                        ManagedRuleGroupStatement: 
                            VendorName: "AWS"
                            Name: "AWSManagedRulesKnownBadInputsRuleSet"
                    VisibilityConfig: 
                        SampledRequestsEnabled: true
                        CloudWatchMetricsEnabled: true
                        MetricName: "AWS-AWSManagedRulesKnownBadInputsRuleSet"
                    
    # Cloudfront
    Distribution:
        Type: "AWS::CloudFront::Distribution"
        Properties:
            DistributionConfig: 
                Origins: 
                - 
                    ConnectionAttempts: 3
                    ConnectionTimeout: 10
                    DomainName: !GetAtt ApplicationLoadBalancer.DNSName
                    Id: !Ref ApplicationLoadBalancer
                    OriginCustomHeaders:
                    - 
                        HeaderName: X-Custom-Header
                        HeaderValue: !Join ['-', [!Sub "${AWS::StackName}", !Sub "${AWS::AccountId}"]]
                    CustomOriginConfig:
                        HTTPPort: '80'
                        OriginProtocolPolicy: 'http-only'
                DefaultCacheBehavior: 
                    ForwardedValues:
                        Cookies:
                            Forward: whitelist
                            WhitelistedNames: [token]
                        QueryString: true
                        QueryStringCacheKeys: [code]
                    Compress: true
                    ViewerProtocolPolicy: 'https-only'
                    AllowedMethods: 
                        - "HEAD"
                        - "DELETE"
                        - "POST"
                        - "GET"
                        - "OPTIONS"
                        - "PUT"
                        - "PATCH"
                    CachedMethods: 
                        - "HEAD"
                        - "GET"
                    CachePolicyId: "658327ea-f89d-4fab-a63d-7e88639e58f6"
                    OriginRequestPolicyId: "216adef6-5c7f-47e4-b989-5492eafa07d3"
                    TargetOriginId: !Ref ApplicationLoadBalancer
                PriceClass: "PriceClass_All"
                Enabled: true                  
                HttpVersion: "http2"
                IPV6Enabled: true
                Logging: 
                    Bucket: !Sub '${LoggingBucket}.s3.amazonaws.com'
                    IncludeCookies: true
                    Prefix: !Sub distribution-${EnvironmentName}-logs/
                ViewerCertificate:
                    CloudFrontDefaultCertificate: true
                    MinimumProtocolVersion: TLSv1.2_2018
                WebACLId: !GetAtt CloudFrontWebACL.Arn
Outputs:
    CloudfrontURL:
        Description: "CloudFront URL"
        Value: !GetAtt Distribution.DomainName

    CloudfrontID:
        Description: "CloudFront ID"
        Value: !Ref Distribution
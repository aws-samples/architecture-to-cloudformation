AWSTemplateFormatVersion: 2010-09-09
Description: >
  This CloudFormation stack deploys a highly available and scalable web application architecture
  within an Amazon Virtual Private Cloud (VPC). The architecture includes the following components:

  - A VPC with two Availability Zones, each with a public private and protected subnet
  - An Internet Gateway and two NAT Gateways for internet connectivity
  - Security groups and routing tables for secure network communication

Metadata:
    'AWS::CloudFormation::Interface':
        ParameterGroups:
        - Label:
            default: 'VPC Configuration'
          Parameters:
          - Vpccidr
          - PublicSubnetAcidr
          - PublicSubnetBcidr
          - PrivateSubnetAcidr
          - PrivateSubnetBcidr
          - ProtectedSubnetAcidr
          - ProtectedSubnetBcidr
Parameters:
    Vpccidr:
        Description: Please enter the IP range (CIDR notation) for the VPC
        Type: String
        Default: 10.0.0.0/16

    PublicSubnetAcidr:
        Description: Please enter the IP range (CIDR notation) for the public subnet in the first Availability Zone
        Type: String
        Default: 10.0.0.0/24

    PublicSubnetBcidr:
        Description: Please enter the IP range (CIDR notation) for the public subnet in the second Availability Zone
        Type: String
        Default: 10.0.1.0/24

    PrivateSubnetAcidr:
        Description: Please enter the IP range (CIDR notation) for the private subnet in the first Availability Zone
        Type: String
        Default: 10.0.2.0/24

    PrivateSubnetBcidr:
        Description: Please enter the IP range (CIDR notation) for the private subnet in the second Availability Zone
        Type: String
        Default: 10.0.3.0/24

    ProtectedSubnetAcidr:
        Description: Please enter the IP range (CIDR notation) for the protected subnet in the first Availability Zone
        Type: String
        Default: 10.0.6.0/24

    ProtectedSubnetBcidr:
        Description: Please enter the IP range (CIDR notation) for the protected subnet in the second Availability Zone
        Type: String
        Default: 10.0.7.0/24

Resources:
    # Logs Policy
    LogsPolicy:
        Type: "AWS::IAM::ManagedPolicy"
        Properties:
            Path: /
            PolicyDocument:
                Version: '2012-10-17'
                Statement:
                - 
                    Effect: 'Allow'
                    Action:
                    - 'logs:CreateLogGroup'
                    - 'logs:CreateLogStream'
                    - 'logs:PutLogEvents'
                    - 'logs:PutRetentionPolicy'
                    Resource: '*'

    # VPC
    VPC:
        Type: AWS::EC2::VPC
        Properties:
            CidrBlock: !Ref Vpccidr
            EnableDnsSupport: true
            EnableDnsHostnames: true
            Tags:
                - 
                    Key: Name
                    Value: 'VPC'

    VPCLogGroup:
        DeletionPolicy: Retain
        Type: 'AWS::Logs::LogGroup'
        Properties:
            RetentionInDays: 7
        
    VPCLogRole:
        Type: AWS::IAM::Role
        Properties:
            AssumeRolePolicyDocument:
                Version: "2012-10-17"
                Statement:
                - 
                    Effect: Allow
                    Principal:
                        Service: vpc-flow-logs.amazonaws.com
                    Action: sts:AssumeRole
            ManagedPolicyArns:
                - !GetAtt LogsPolicy.PolicyArn

    VPCFlowLog:
        Type: "AWS::EC2::FlowLog"
        Properties:
            ResourceId: !Ref VPC
            ResourceType: VPC
            TrafficType: ALL
            LogGroupName: !Ref VPCLogGroup
            DeliverLogsPermissionArn: !GetAtt VPCLogRole.Arn

    # Internet Gateway
    InternetGateway:
        Type: AWS::EC2::InternetGateway
        Properties:
            Tags:
                - 
                    Key: Name
                    Value: InternetGateway

    InternetGatewayAttachment:
        Type: AWS::EC2::VPCGatewayAttachment
        Properties:
            InternetGatewayId: !Ref InternetGateway
            VpcId: !Ref VPC

    # Create a Subnet
    PublicSubnetA:  
        Type: AWS::EC2::Subnet
        Properties:
            CidrBlock: !Ref PublicSubnetAcidr
            VpcId: !Ref VPC
            AvailabilityZone: !Select 
                                - 0
                                - Fn::GetAZs: !Ref 'AWS::Region'
            Tags:
                - 
                    Key: Name
                    Value: PublicSubnetA

    PublicSubnetB:
        Type: AWS::EC2::Subnet
        Properties:
            CidrBlock: !Ref PublicSubnetBcidr
            VpcId: !Ref VPC
            AvailabilityZone: !Select 
                                - 1
                                - Fn::GetAZs: !Ref 'AWS::Region'
            Tags:
                - 
                    Key: Name
                    Value: PublicSubnetB

    PrivateSubnetA:
        Type: AWS::EC2::Subnet
        Properties:
            CidrBlock: !Ref PrivateSubnetAcidr
            VpcId: !Ref VPC
            AvailabilityZone: !Select 
                                - 0
                                - Fn::GetAZs: !Ref 'AWS::Region'
            Tags:
                - 
                    Key: Name
                    Value: PrivateSubnetA

    PrivateSubnetB:
        Type: AWS::EC2::Subnet
        Properties:
            CidrBlock: !Ref PrivateSubnetBcidr
            VpcId: !Ref VPC
            AvailabilityZone: !Select 
                                - 1
                                - Fn::GetAZs: !Ref 'AWS::Region'
            Tags:
                - 
                    Key: Name
                    Value: PrivateSubnetB

    ProtectedSubnetA:
        Type: AWS::EC2::Subnet
        Properties:
            VpcId: !Ref VPC
            AvailabilityZone: !Select 
                                - 0
                                - Fn::GetAZs: !Ref 'AWS::Region'
            CidrBlock: !Ref ProtectedSubnetAcidr
            MapPublicIpOnLaunch: false
            Tags:
                - 
                    Key: Name
                    Value: ProtectedSubnetA

    ProtectedSubnetB:
        Type: AWS::EC2::Subnet
        Properties:
            VpcId: !Ref VPC
            AvailabilityZone: !Select 
                                - 1
                                - Fn::GetAZs: !Ref 'AWS::Region'
            CidrBlock: !Ref ProtectedSubnetBcidr
            MapPublicIpOnLaunch: false
            Tags:
                - 
                    Key: Name
                    Value: ProtectedSubnetB

    # NAT Gateway
    NatGatewayAEIP:
        Type: AWS::EC2::EIP
        DependsOn: InternetGatewayAttachment
        Properties:
            Domain: vpc

    NatGatewayBEIP:
        Type: AWS::EC2::EIP
        DependsOn: InternetGatewayAttachment
        Properties:
            Domain: vpc

    NatGatewayA:
        Type: AWS::EC2::NatGateway
        Properties:
            AllocationId: !GetAtt NatGatewayAEIP.AllocationId
            SubnetId: !Ref PublicSubnetA

    NatGatewayB:
        Type: AWS::EC2::NatGateway
        Properties:
            AllocationId: !GetAtt NatGatewayBEIP.AllocationId
            SubnetId: !Ref PublicSubnetB

    # Public Route Table 
    PublicRouteTable:
        Type: AWS::EC2::RouteTable
        Properties:
            VpcId: !Ref VPC
            Tags:
                - 
                    Key: Name
                    Value: PublicRouteTable

    DefaultPublicRoute:
        Type: AWS::EC2::Route
        DependsOn: InternetGatewayAttachment
        Properties:
            RouteTableId: !Ref PublicRouteTable
            DestinationCidrBlock: 0.0.0.0/0
            GatewayId: !Ref InternetGateway

    PublicSubnetARouteTableAssociation:
        Type: AWS::EC2::SubnetRouteTableAssociation
        Properties:
            RouteTableId: !Ref PublicRouteTable
            SubnetId: !Ref PublicSubnetA

    PublicSubnetBRouteTableAssociation:
        Type: AWS::EC2::SubnetRouteTableAssociation
        Properties:
            RouteTableId: !Ref PublicRouteTable
            SubnetId: !Ref PublicSubnetB

    # Private Route Table
    PrivateRouteTableA:
        Type: AWS::EC2::RouteTable
        Properties:
            VpcId: !Ref VPC
            Tags:
                - 
                    Key: Name
                    Value: PrivateRouteTableA

    DefaultPrivateRouteA:
        Type: AWS::EC2::Route
        Properties:
            RouteTableId: !Ref PrivateRouteTableA
            DestinationCidrBlock: 0.0.0.0/0
            NatGatewayId: !Ref NatGatewayA

    PrivateSubnetARouteTableAssociation:
        Type: AWS::EC2::SubnetRouteTableAssociation
        Properties:
            RouteTableId: !Ref PrivateRouteTableA
            SubnetId: !Ref PrivateSubnetA

    PrivateRouteTableB:
        Type: AWS::EC2::RouteTable
        Properties:
            VpcId: !Ref VPC
            Tags:
                - 
                    Key: Name
                    Value: PrivateRouteTableB

    DefaultPrivateRouteB:
        Type: AWS::EC2::Route
        Properties:
            RouteTableId: !Ref PrivateRouteTableB
            DestinationCidrBlock: 0.0.0.0/0
            NatGatewayId: !Ref NatGatewayB

    PrivateSubnetBRouteTableAssociation:
        Type: AWS::EC2::SubnetRouteTableAssociation
        Properties:
            RouteTableId: !Ref PrivateRouteTableB
            SubnetId: !Ref PrivateSubnetB

    # Protected Route Table
    ProtectedRouteTableA:
        Type: AWS::EC2::RouteTable
        Properties:
            VpcId: !Ref VPC
            Tags:
                - 
                    Key: Name
                    Value: ProtectedRouteTableA

    ProtectedSubnetARouteTableAssociation:
        Type: AWS::EC2::SubnetRouteTableAssociation
        Properties:
            RouteTableId: !Ref ProtectedRouteTableA
            SubnetId: !Ref ProtectedSubnetA

    ProtectedRouteTableB:
        Type: AWS::EC2::RouteTable
        Properties:
            VpcId: !Ref VPC
            Tags:
                - 
                    Key: Name
                    Value: ProtectedRouteTableB

    ProtectedSubnetBRouteTableAssociation:
        Type: AWS::EC2::SubnetRouteTableAssociation
        Properties:
            RouteTableId: !Ref ProtectedRouteTableB
            SubnetId: !Ref ProtectedSubnetB
Outputs:
    VPC:
        Description: "VPC"
        Value: !Ref VPC